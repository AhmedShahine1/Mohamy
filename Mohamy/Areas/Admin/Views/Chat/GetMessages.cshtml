<html>
<head>
    <title>Chat Interface</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet" />
    <style>
        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        .header1 {
            display: flex;
            align-items: center;
            padding: 10px 20px;
        }

            .header1 img {
                border-radius: 50%;
                width: 40px;
                height: 40px;
                margin-right: 10px;
            }

            .header1 .user-info {
                flex-grow: 1;
            }

                .header1 .user-info h2 {
                    margin: 0;
                    font-size: 18px;
                }

                .header1 .user-info p {
                    margin: 0;
                    font-size: 12px;
                    color: #a0a0a0;
                }

            .header1 .icons {
                display: flex;
                gap: 15px;
            }

                .header1 .icons i {
                    color: #4055a8;
                    font-size: 18px;
                    cursor: pointer;
                }

        .chat-box {
            flex-grow: 1;
            padding: 20px;
            display: flex;
            flex-direction: column;
            overflow-y: auto; /* Ensures scrolling */
            max-height: 80vh; /* Set a maximum height for the chat box */
        }

        .message {
            display: flex;
            align-items: flex-end;
            margin-bottom: 10px;
        }

            .message img {
                border-radius: 50%;
                width: 30px;
                height: 30px;
                margin-right: 10px;
            }

            .message .text {
                max-width: 60%;
                padding: 10px;
                border-radius: 10px;
                position: relative;
            }

                .message .text p {
                    margin: 0;
                }

                .message .text .time {
                    font-size: 10px;
                    color: #a0a0a0;
                    bottom: -15px;
                    right: -9px;
                }

            .message.sent {
                justify-content: flex-end;
            }

                .message.sent .text {
                    background-color: #3a3a3a;
                    color: #fff;
                    border-bottom-right-radius: 0;
                }

            .message.received {
                justify-content: flex-start;
            }

                .message.received .text {
                    background-color: #4055a8;
                    color: #fff;
                    border-bottom-left-radius: 0;
                }

        .input-box {
            display: flex;
            align-items: center;
            padding: 10px 20px;
        }

            .input-box input {
                flex-grow: 1;
                padding: 10px;
                border: none;
                border-radius: 20px;
                background-color: #3a3a3a;
                color: #fff;
                margin-right: 10px;
            }

                .input-box input::placeholder {
                    color: #a0a0a0;
                }

            .input-box .send-btn {
                background-color: #4055a8;
                border: none;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                cursor: pointer;
            }

                .input-box .send-btn i {
                    color: #fff;
                    font-size: 18px;
                }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="header1">
            <div class="user-info">
                <img src="@Model.ProfileimageCustomer" alt="icon" />
            </div>
            <div class="user-info">
                <h2>@Model.CustomerName</h2>
            </div>
            <div class="icons">
                <i class="fas fa-phone"></i>
            </div>
        </div>

        <div id="chat-box" class="chat-box">
            <!-- Chat messages will be dynamically inserted here -->
        </div>

    </div>

    <script src="/lib/microsoft-signalr/signalr.min.js"></script>
    <script type="text/javascript">
        var chatId = "@Model.ChatId";
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        // Start the connection
        connection.start().then(function () {
            console.log("Connection to hub established successfully.");
            joinChat(chatId);
        }).catch(function (err) {
            console.error("Error starting connection: ", err.toString());
        });

        async function joinChat(chatId) {
            try {
                await connection.invoke("JoinChat", chatId);
                console.log(`Successfully joined chat with ID: ${chatId}`);
            } catch (err) {
                console.error("Error joining chat: ", err);
            }
        }

        function appendMessage(sender, message, timestamp) {
            const chatBox = document.getElementById("chat-box");
            const messageElement = document.createElement("div");

            const timeString = timestamp;
            const currentUser = "@Model.LawyerPhoneNumber";
            const messageClass = sender === currentUser ? 'sent' : 'received';

            messageElement.classList.add('message', messageClass);
            messageElement.innerHTML = `
                                                        <div class="text">
                                                            <p>${message}</p>
                                                            <span class="time">${timeString}</span>
                                                        </div>
                                                    `;
            chatBox.appendChild(messageElement);

            // Ensure chat box scrolls to the bottom after appending the message
            setTimeout(() => {
                chatBox.scrollTop = chatBox.scrollHeight;
            }, 100);  // Adding a slight delay to ensure the DOM updates before scrolling
            console.log("Message appended to chat:", message);
        }

        connection.on("ReceiveMessage", function (sender, message, timestamp) {
            appendMessage(sender, message, timestamp);
        });

        connection.onclose(function (error) {
            console.error("Connection closed: ", error);
        });

        connection.onreconnecting(function () {
            console.warn("Connection is reconnecting...");
        });

        connection.onreconnected(function () {
            console.log("Connection reestablished.");
        });

        // Handle reconnections
        connection.onclose(async () => {
            console.error("SignalR connection closed. Trying to reconnect...");
            await startConnection();  // Attempt to reconnect after the connection is closed
        });

        async function startConnection() {
            try {
                await connection.start();
                const chatBox = document.getElementById("chat-box");
                chatBox.innerHTML = '';
                joinChat(chatId);
                console.log("Reconnected to SignalR hub.");
            } catch (err) {
                console.error("Error reconnecting: ", err.toString());
                setTimeout(startConnection, 5000);  // Retry after 5 seconds
            }
        }
    </script>
</body>
</html>
